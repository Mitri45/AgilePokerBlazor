@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IDialogService DialogService
@implements IAsyncDisposable
@inject ILogger<Home> Logger

<PageTitle>Welcome to Agile Poker</PageTitle>

<form method="post" @onsubmit="Submit" @formname="start-new-session-form">
    <AntiforgeryToken />
    <div>
        <label>
            Your Name:
            <InputText @bind-Value="Model!.Name" />
        </label>
        <label>
            Topic to discuss:
            <InputText @bind-Value="Model!.Topic" />
        </label>
    </div>
    <div>
        <button type="submit">Start New Session</button>
    </div>
</form>

@code {

    // This is the model that will be bound to the form
    [SupplyParameterFromForm]
    public StartNewSessionForm? Model { get; set; }

    protected override void OnInitialized() => Model ??= new();

    private void Submit()
    {
        Logger.LogInformation("Name = {Name}", Model?.Name);
        Logger.LogInformation("Topic = {Topic}", Model?.Topic);
    }

    public class StartNewSessionForm
    {
        public string? Name { get; set; }
        public string? Topic { get; set; }
    }

    // Handle SignalR
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/poker"))
        .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
    hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}